# coding=UTF-8
# -----------------------------------------------
# Generated by InVEST 3.9.0 on Thu Jan 21 16:34:22 2021
# Model: Sediment Delivery Ratio Model (SDR)

import os
import logging
import sys

import pandas
from osgeo import ogr
from osgeo import osr

import natcap.invest.sdr.sdr
import natcap.invest.utils

LOGGER = logging.getLogger(__name__)
root_logger = logging.getLogger()

handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter(
    fmt=natcap.invest.utils.LOG_FMT,
    datefmt='%m/%d/%Y %H:%M:%S ')
handler.setFormatter(formatter)
logging.basicConfig(level=logging.INFO, handlers=[handler])

args = {
    'dem_path': 'C:/Users/ginge/Dropbox/NatCap_backup/Moore_Amazon/SDR_SWY_data_inputs/projected/HydroSHEDS_CON_Chaglla_UTM18S.tif',
    'drainage_path': '',
    'erodibility_path': 'C:/Users/ginge/Dropbox/NatCap_backup/Moore_Amazon/SDR_SWY_data_inputs/projected/erodibility_ISRIC_30arcseconds.tif',
    'ic_0_param': '0.5',
    'k_param': '2',
    'results_suffix': '',
    'sdr_max': '0.8',
    'threshold_flow_accumulation': '1000',
    'watersheds_path': 'C:/Users/ginge/Dropbox/NatCap_backup/Moore_Amazon/SDR_SWY_data_inputs/projected/Chaglla_dam_watershed.shp',
    'biophysical_table_path': 'C:/Users/ginge/Dropbox/NatCap_backup/Moore_Amazon/SDR_SWY_data_inputs/biophysical_table_Chaglla_SEALS_simplified.csv',
}


def sdr_outputs_to_dict(watershed_results_path):
    """Read sdr results from watershed results and return as a dict."""
    sdr_dict = {
        'WS_ID': [],
        'usle_tot': [],
        'sed_export': [],
        'sed_retent': [],
        'sed_dep': [],
    }
    ws_vector = ogr.Open(watershed_results_path)
    ws_layer = ws_vector.GetLayer()
    for ws_feature in ws_layer:
        for field_name in sdr_dict:
            sdr_dict[field_name].append(ws_feature.GetField(field_name))

    ws_layer = None
    ws_layer = None
    return sdr_dict


if __name__ == '__main__':
    # outer_dir = 'C:/Users/ginge/Documents/NatCap/GIS_local/Moore_Amazon'
    # result_dir = os.path.join(outer_dir, 'SDR_workspace')
    result_dir = 'C:/SDR_workspace'
    lulc_pattern = "C:/Users/ginge/Dropbox/NatCap_backup/Moore_Amazon/SDR_SWY_data_inputs/SEALS_lulc/lulc_RCP{}_year{}.tif"
    erosivity_pattern = "F:/Moore_Amazon_backups/precipitation/erosivity_Riquetti/erosivity_year{}_rcp{}.tif"

    df_list = []

    # SEALS landcover, "Riquetti" erosivity
    args['workspace_dir'] = os.path.join(result_dir, 'current')
    args['lulc_path'] = "C:/Users/ginge/Dropbox/NatCap_backup/Moore_Amazon/SDR_SWY_data_inputs/SEALS_lulc/lulc_current.tif"
    args['erosivity_path'] = 'F:/Moore_Amazon_backups/precipitation/erosivity_Riquetti/erosivity_current.tif'
    # natcap.invest.sdr.sdr.execute(args)

    sdr_dict = sdr_outputs_to_dict(
        os.path.join(args['workspace_dir'], 'watershed_results_sdr.shp'))
    sdr_dict['year'] = ['2015' * len(sdr_dict['WS_ID'])]
    sdr_dict['scenario'] = ['current' * len(sdr_dict['WS_ID'])]
    sdr_dict['erosivity'] = ['Riquetti_current' * len(sdr_dict['WS_ID'])]
    sdr_df = pandas.DataFrame(sdr_dict)
    df_list.append(sdr_df)

    for year in ['2050', '2070']:
        for rcp in ['2.6', '6.0', '8.5']:
            # lulc only reflecting future conditions
            args['workspace_dir'] = os.path.join(
                result_dir, 'year_{}'.format(year), 'rcp_{}'.format(rcp),
                'current_erosivity')
            args['lulc_path'] = lulc_pattern.format(rcp, year)
            natcap.invest.sdr.sdr.execute(args)

            sdr_dict = sdr_outputs_to_dict(
                os.path.join(args['workspace_dir'],
                'watershed_results_sdr.shp'))
            sdr_dict['year'] = [year * len(sdr_dict['WS_ID'])]
            sdr_dict['scenario'] = [rcp * len(sdr_dict['WS_ID'])]
            sdr_dict['erosivity'] = [
                'current' * len(sdr_dict['WS_ID'])]
            sdr_df = pandas.DataFrame(sdr_dict)
            df_list.append(sdr_df)

            # lulc and erosivity reflecting future conditions
            args['workspace_dir'] = os.path.join(
                result_dir, 'year_{}'.format(year), 'rcp_{}'.format(rcp))
            args['erosivity_path'] = erosivity_pattern.format(year[2:], rcp)
            # natcap.invest.sdr.sdr.execute(args)

            sdr_dict = sdr_outputs_to_dict(
                os.path.join(args['workspace_dir'],
                'watershed_results_sdr.shp'))
            sdr_dict['year'] = [year * len(sdr_dict['WS_ID'])]
            sdr_dict['scenario'] = [rcp * len(sdr_dict['WS_ID'])]
            sdr_dict['erosivity'] = [
                'Riquetti_future_precip' * len(sdr_dict['WS_ID'])]
            sdr_df = pandas.DataFrame(sdr_dict)
            df_list.append(sdr_df)

    summary_df = pandas.concat(df_list)
    summary_df.to_csv(
        os.path.join(result_dir, 'watershed_results_summary.csv'), index=False)

